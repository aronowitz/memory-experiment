if(identical(form, 'default')){
form0 <- 'y ~ treat * time + (1|'
form1 <- ifelse(ncol(data) > 3, 'class/id', 'id')
form <- paste0(form0, form1, ')')
}
form <- as.formula(form)
names(fixed) <- NULL; names(rand) <- NULL
out <- simr::makeLmer(formula = form, fixef = fixed,
VarCorr = rand, sigma = sigma,
data = data)
return(out)
}
fixed = params(4)
m1 = makeMod(out1, fixed, list(.5), 2)
sim = powerSim(m1, nsim = 100, test = fcompare(y ~ time))
sim
out1
out1 = makeCovs(10, 3, 2, 5)
excoefs()
fixed
fixed2 = fixed
fixed2[1] = 0
fixed2
m1 = makeMod(out1, fixed, rand, 2)
m2 = makeMod(out1, fixed2, rand, 2)
set.seed(1)
sim1 = powerSim(m1, nsim = 100, test = fcompare(y ~ time))
sim1
set.seed(1)
sim2 = powerSim(m2, nsim = 100, test = fcompare(y ~ time))
sim2
fixed
fixed[2] = .5
rmall()
source('~/R/simr/powerFunctions.R')
params(T)
m1 = makeMod(data, fixed, rand, 2)
set.seed91
set.seed(1)
sim = powerSim(m1, nsim = 100, test = fcompare(y ~ time))
fixed <- params(4)
out1 <- makeCovs(100, 4)
sim
m1 = makeMod(out1, fixed, list(.5), 2)
sim = powerSim(m1, nsim = 100, test = fcompare(y ~ time))
sim
fixed <- params(4)
out1 <- makeCovs(100, 4, classes = 4)
m1 = makeMod(out1, fixed, list(.5, .1), 2)
sim = powerSim(m1, nsim = 100, test = fcompare(y ~ time))
sim
out1 <- makeCovs(30, 4, classes = 4)
m1 = makeMod(out1, fixed, list(.5, .1), 2)
sim = powerSim(m1, nsim = 100, test = fcompare(y ~ time))
sim
fixed
out1
subset(out1, class == 'A')
head(out1)
subset(out1, class == 'a')
k = subset(out1, class == 'a')
count(k$time)
fixed
fixed = rep(.2, 12)
out1 <- makeCovs(30, 4, classes = 4)
m1 = makeMod(out1, fixed, list(.5, .1), 2)
sim = powerSim(m1, nsim = 100, test = fcompare(y ~ time))
sim
fixed = rep(.4, 12)
m1 = makeMod(out1, fixed, list(.5, .1), 2)
sim = powerSim(m1, nsim = 100, test = fcompare(y ~ time))
sim
fixed <- params(4)
out1 <- makeCovs(30, 4, classes = 4)
m1 = makeMod(out1, fixed, list(.5, .1), 2)
sim = powerSim(m1, nsim = 100, test = fcompare(y ~ time))
sim
sim
out1
fixed
fixed = rep(.4, 12)
m1 = makeMod(out1, fixed, list(.5, .1), 2)
sim = powerSim(m1, nsim = 100, test = fcompare(y ~ time))
sim
out1 <- makeCovs(50, 4, classes = 4)
m1 = makeMod(out1, fixed, list(.5, .1), 2)
sim = powerSim(m1, nsim = 100, test = fcompare(y ~ time))
sim
out1
dim(subset(out1, class == 'a'))
dim(subset(out1, class == 'a'))/4
subset(out1, class == 'a')
subset(out1, class == 'a' & time == 1)
dim(subset(out1, time == 1))
out1
k = subset(out1, time == 1)
count(k$treat)
68 * 3
200/3
### SIMPLE RANDOMIZATION
set.seed(888)
treatment <- c('A', 'B')
simple.list <- sample(treatment, 20, replace = TRUE)
cat(simple.list, sep = '\n')
table(simple.list)
library(blockrand)
set.seed(888)
block.list <- blockrand(n = 20, num.levels = 2, block.sizes = c(2, 2))
block.list
block.list2 <- blockrand(n = 20, num.levels = 2, block.sizes = c(1, 2))
block.list2
### STRATIFIED RANDOMIZATION
# Balance in patient characteristics may not be achieved in small studies
# Common strata: age, group, etc.
# Generate randomized list for each stratum
over50.severe.list <- blockrand(n = 100, num.levels = 2,
block.sizes = c(1, 2, 3, 4),
stratum = 'Over 50 Severe',
id.prefix = 'O50_S',
block.prefix = 'O50_S')
over50.severe.list
library(simr)
simr:::glmerSet
setwd('Documents/MEMORY_STUDY/DATA/')
dir()
setwd('final')
dir('')
dir()
file.edit('finalAnalysis.R')
source('../../extractData.R')
out <- getData(getJSONS(), matchPs = TRUE)
sorts <- lapply(out, lapply, getSorts)
props <- getCorrect(out)
head(out$dat1$p1)
k = lapply(out, sapply, getTurkID)
identical(k[[1]], k[[2]])
identical(k[[1]], k[[3]])
dir()
sorts$dat1$p1
k = seq(1, 288, by = 8)
k
k = seq(1, 288, by = 9)
k
sorts$dat1$p1[k,]
sorts$dat1$p1[k,1]
sorts$dat1$p1[k,1] == 1:32
props$dat1[,1]
props$dat1[,1] == sorts$dat1$p1[k,3]/9
sorts$dat1$p1
z = sorts$dat1
i = z$p1
i
for(i in 1:3){
for(j in 1:length(sorts[[i]])){
sorts[[i]][[j]] <- cbind.data.frame(ID = j, sorts[[i]][[j]])
}
}
head(sorts$dat1$p1)
head(sorts$dat1$p56)
head(sorts$dat2$p56)
for(i in 1:3){
for(j in 1:length(sorts[[i]])){
sorts[[i]][[j]] <- cbind.data.frame(ID = j, sorts[[i]][[j]])
}
sorts[[i]] <- data.frame(do.call(rbind, sorts[[i]]))
}
sorts <- lapply(out, lapply, getSorts)
for(i in 1:3){
for(j in 1:length(sorts[[i]])){
sorts[[i]][[j]] <- cbind.data.frame(ID = j, sorts[[i]][[j]])
}
sorts[[i]] <- data.frame(do.call(rbind, sorts[[i]]))
}
head(sorts$dat1)
tail(sorts$dat1)
dim(sorts$dat1)
tail(sorts$dat2)
sorts$dat2$trial <- sorts$dat2$trial + 32
sorts$dat3$trial <- sorts$dat3$trial + 62
tail(sorts$dat3)
sapply(props, nrow)
sum(sapply(props, nrow))
head(sorts$dat1)
head(sorts$dat2)
head(sorts$dat3)
tail(sorts$dat2)
for(i in 1:3){
sorts[[i]] <- data.frame(ID = sorts[[i]]$ID, session = i, sorts[[i]][, -1])
}
head(sorts$dat1)
sorts <- data.frame(do.call(rbind, sorts))
dim(sorts)
head(sorts)
rownames(sorts) <- 1:nrow(sorts)
head(sorts)
tail(sorts)
write.csv(sorts, 'fullData.csv', row.names = FALSE)
sorts <- lapply(out, lapply, getSorts)
head(sorts$dat1$p1)
z = sorts$dat1
z$p1
sapply(z, nrow)
unique(sapply(z, nrow))
unique(sapply(z, nrow))
k <- seq(1, unique(sapply(z, nrow)), by = 9)
k
i = z$p1
i
i[k,]
simple <- lapply(sorts, function(z){
k <- seq(1, unique(sapply(z, nrow)), by = 9)
lapply(z, function(i) i[k, 1:3])
})
simple$dat1$p1
sapply(simple$dat1, nrow)
sapply(simple$dat2, nrow)
sapply(simple$dat3, nrow)
rmall()
source('../../extractData.R')
out <- getData(getJSONS(), matchPs = TRUE)
sorts <- lapply(out, lapply, getSorts)
simple <- lapply(sorts, function(z){
k <- seq(1, unique(sapply(z, nrow)), by = 9)
lapply(z, function(i) i[k, 1:3])
})
head(simple$dat1)
head(simple$dat1$p1)
getSorts
head(sorts$dat1$p1)
z = sorts$dat1
head(z$p1)
head(z$p1, 1:18)
head(z$p1, 18)
head(z$p1, 19)
sorts <- lapply(out, lapply, getSorts)
sorts <- lapply(sorts, function(z){
lapply(z, function(z) i[-(1:18), ])
})
sorts <- lapply(sorts, function(z){
lapply(z, function(i) i[-(1:18), ])
})
head(sorts$dat1)
head(sorts$dat1$p1)
sorts <- lapply(out, lapply, getSorts)
sorts <- lapply(sorts, function(z){
lapply(z, function(i){
ii <- i[-(1:18), ]
ii$trial <- ii$trial - 2
return(ii)
})
})
sapply(sorts$dat1, nrow)
head(sorts$dat1$p1)
tail(sorts$dat1$p1)
z = sorts$dat1
unique(sapply(z, nrow))
simple <- lapply(sorts, function(z){
k <- seq(1, unique(sapply(z, nrow)), by = 9)
lapply(z, function(i) i[k, 1:3])
})
head(simple$dat1)
sapply(simple$dat1, nrow)
unique(sapply(simple$dat1, nrow))
unique(sapply(simple$dat2, nrow))
sorts <- lapply(out, lapply, getSorts)
sorts$dat1 <- lapply(sorts$dat1, function(z){
z1 <- z[-(1:18), ]
z1$trial <- z1$trial - 2
return(z1)
})
simple <- lapply(sorts, function(z){
k <- seq(1, unique(sapply(z, nrow)), by = 9)
lapply(z, function(i) i[k, 1:3])
})
sapply(simple$dat1, nrow)
unique(sapply(simple$dat1, nrow))
unique(sapply(simple$dat2, nrow))
unique(sapply(simple$dat3, nrow))
rmall()
source('../../extractData.R')
out <- getData(getJSONS(), matchPs = TRUE)
sorts <- lapply(out, lapply, getSorts)
sorts$dat1 <- lapply(sorts$dat1, function(z){
z1 <- z[-(1:18), ]
z1$trial <- z1$trial - 2
return(z1)
})
simple <- lapply(sorts, function(z){
k <- seq(1, unique(sapply(z, nrow)), by = 9)
lapply(z, function(i) i[k, 1:3])
})
props <- getCorrect(out)
# Create full dataset (all items, all trials, all IDs, all sessions)
for(i in 1:3){
for(j in 1:length(sorts[[i]])){
sorts[[i]][[j]] <- cbind.data.frame(ID = j, sorts[[i]][[j]])
}
sorts[[i]] <- data.frame(do.call(rbind, sorts[[i]]))
}
sorts$dat2$trial <- sorts$dat2$trial + 30
sorts$dat3$trial <- sorts$dat3$trial + 60
for(i in 1:3){
sorts[[i]] <- data.frame(ID = sorts[[i]]$ID, session = i, sorts[[i]][, -1])
}
sorts <- data.frame(do.call(rbind, sorts))
rownames(sorts) <- 1:nrow(sorts)
dim(sorts)
56 * 90 * 9
9 * 30 * 56 * 3
rmall()
source('../../extractData.R')
out <- getData(getJSONS(), matchPs = TRUE)
sorts <- lapply(out, lapply, getSorts)
sorts$dat1 <- lapply(sorts$dat1, function(z){
z1 <- z[-(1:18), ]
z1$trial <- z1$trial - 2
return(z1)
})
simple <- lapply(sorts, function(z){
k <- seq(1, unique(sapply(z, nrow)), by = 9)
lapply(z, function(i) i[k, 1:3])
})
# Create datasets (all items, all trials, all IDs, all sessions)
for(i in 1:3){
for(j in 1:length(sorts[[i]])){
sorts[[i]][[j]] <- cbind.data.frame(ID = j, sorts[[i]][[j]])
simple[[i]][[j]] <- cbind.data.frame(ID = j, simple[[i]][[j]])
}
sorts[[i]] <- data.frame(do.call(rbind, sorts[[i]]))
simple[[i]] <- data.frame(do.call(rbind, simple[[i]]))
}
sorts$dat2$trial <- sorts$dat2$trial + 30
simple$dat2$trial <- simple$dat2$trial + 30
sorts$dat3$trial <- sorts$dat3$trial + 60
simple$dat3$trial <- simple$dat3$trial + 60
for(i in 1:3){
sorts[[i]] <- data.frame(ID = sorts[[i]]$ID, session = i, sorts[[i]][, -1])
simple[[i]] <- data.frame(ID = simple[[i]]$ID, session = i, simple[[i]][, -1])
}
sorts <- data.frame(do.call(rbind, sorts))
simple <- data.frame(do.call(rbind, simple))
rownames(sorts) <- 1:nrow(sorts)
rownames(simple) <- 1:nrow(simple)
write.csv(sorts, 'fullData.csv', row.names = FALSE)
write.csv(simple, 'simpleData.csv', row.names = FALSE)
dim(simple)
90 * 56
head(simple)
head(sorts)
dir()
head(out$dat1$p1)
head(sorts, 9)
head(out$dat1$p1, 9)
head(out$dat1$p1, 12)
head(sorts)
head(simple)
for(i in c('ID', 'session', 'condition')){
sorts[[i]] <- factor(sorts[[i]])
simple[[i]] <- factor(sorts[[i]])
}
rmall()
source('../../extractData.R')
out <- getData(getJSONS(), matchPs = TRUE)
sorts <- lapply(out, lapply, getSorts)
sorts$dat1 <- lapply(sorts$dat1, function(z){
z1 <- z[-(1:18), ]
z1$trial <- z1$trial - 2
return(z1)
})
simple <- lapply(sorts, function(z){
k <- seq(1, unique(sapply(z, nrow)), by = 9)
lapply(z, function(i) i[k, 1:3])
})
# props <- getCorrect(out)
# Create datasets (all items, all trials, all IDs, all sessions)
for(i in 1:3){
for(j in 1:length(sorts[[i]])){
sorts[[i]][[j]] <- cbind.data.frame(ID = j, sorts[[i]][[j]])
simple[[i]][[j]] <- cbind.data.frame(ID = j, simple[[i]][[j]])
}
sorts[[i]] <- data.frame(do.call(rbind, sorts[[i]]))
simple[[i]] <- data.frame(do.call(rbind, simple[[i]]))
}
sorts$dat2$trial <- sorts$dat2$trial + 30
simple$dat2$trial <- simple$dat2$trial + 30
sorts$dat3$trial <- sorts$dat3$trial + 60
simple$dat3$trial <- simple$dat3$trial + 60
for(i in 1:3){
sorts[[i]] <- data.frame(ID = sorts[[i]]$ID, session = i, sorts[[i]][, -1])
simple[[i]] <- data.frame(ID = simple[[i]]$ID, session = i, simple[[i]][, -1])
}
sorts <- data.frame(do.call(rbind, sorts))
simple <- data.frame(do.call(rbind, simple))
for(i in c('ID', 'session', 'condition')){
sorts[[i]] <- factor(sorts[[i]])
simple[[i]] <- factor(simple[[i]])
}
head(simple)
rownames(sorts) <- 1:nrow(sorts)
rownames(simple) <- 1:nrow(simple)
write.csv(sorts, 'fullData.csv', row.names = FALSE)
write.csv(simple, 'simpleData.csv', row.names = FALSE)
head(simple)
str(simple)
rmall()
source('../../extractData.R')
out <- getData(getJSONS(), matchPs = TRUE)
sorts <- lapply(out, lapply, getSorts)
sorts$dat1 <- lapply(sorts$dat1, function(z){
z1 <- z[-(1:18), ]
z1$trial <- z1$trial - 2
return(z1)
})
simple <- lapply(sorts, function(z){
k <- seq(1, unique(sapply(z, nrow)), by = 9)
lapply(z, function(i) i[k, 1:3])
})
# props <- getCorrect(out)
# Create datasets (all items, all trials, all IDs, all sessions)
for(i in 1:3){
for(j in 1:length(sorts[[i]])){
sorts[[i]][[j]] <- cbind.data.frame(ID = j, sorts[[i]][[j]])
simple[[i]][[j]] <- cbind.data.frame(ID = j, simple[[i]][[j]])
}
sorts[[i]] <- data.frame(do.call(rbind, sorts[[i]]))
simple[[i]] <- data.frame(do.call(rbind, simple[[i]]))
}
sorts$dat2$trial <- sorts$dat2$trial + 30
simple$dat2$trial <- simple$dat2$trial + 30
sorts$dat3$trial <- sorts$dat3$trial + 60
simple$dat3$trial <- simple$dat3$trial + 60
for(i in 1:3){
sorts[[i]] <- data.frame(ID = sorts[[i]]$ID, session = i, sorts[[i]][, -1])
simple[[i]] <- data.frame(ID = simple[[i]]$ID, session = i, simple[[i]][, -1])
}
sorts <- data.frame(do.call(rbind, sorts))
simple <- data.frame(do.call(rbind, simple))
for(i in c('ID', 'session', 'condition')){
sorts[[i]] <- factor(sorts[[i]])
simple[[i]] <- factor(simple[[i]])
}
head(simple)
rownames(sorts) <- 1:nrow(sorts)
rownames(simple) <- 1:nrow(simple)
write.csv(sorts, 'fullData.csv', row.names = FALSE)
write.csv(simple, 'simpleData.csv', row.names = FALSE)
head(simple)
head(sorts)
dim(sorts)
head(simple)
if(!require(lme4){install.packages('lme4', dependencies = TRUE)})
if(!require(lme4)){install.packages('lme4', dependencies = TRUE)})
if(!require(lme4)){install.packages('lme4', dependencies = TRUE)}
session()
sessionInfo()
props <- getCorrect(out)
head(props$dat1)
props$dat1
unlist(props$dat1)
unlist(props$dat1) == subset(simple, session == 1)[, 'correct']/9
dim(props$dat1)
unlist(props$dat1[-(1:2),]) == subset(simple, session == 1)[, 'correct']/9
all(unlist(props$dat1[-(1:2),]) == subset(simple, session == 1)[, 'correct']/9)
all(unlist(props$dat2) == subset(simple, session == 2)[, 'correct']/9)
all(unlist(props$dat3) == subset(simple, session == 3)[, 'correct']/9)
rmall()
source('../../extractData.R')
out <- getData(getJSONS(), matchPs = TRUE)
sorts <- lapply(out, lapply, getSorts)
sorts$dat1 <- lapply(sorts$dat1, function(z){
z1 <- z[-(1:18), ]
z1$trial <- z1$trial - 2
return(z1)
})
simple <- lapply(sorts, function(z){
k <- seq(1, unique(sapply(z, nrow)), by = 9)
lapply(z, function(i) i[k, 1:3])
})
### Create datasets:
# Full data: all items, all IDs, all trials, all conditions
# Simple data: all IDs, all trials, all conditions
for(i in 1:3){
for(j in 1:length(sorts[[i]])){
sorts[[i]][[j]] <- cbind.data.frame(ID = j, sorts[[i]][[j]])
simple[[i]][[j]] <- cbind.data.frame(ID = j, simple[[i]][[j]])
}
sorts[[i]] <- data.frame(do.call(rbind, sorts[[i]]))
simple[[i]] <- data.frame(do.call(rbind, simple[[i]]))
}
sorts$dat2$trial <- sorts$dat2$trial + 30
simple$dat2$trial <- simple$dat2$trial + 30
sorts$dat3$trial <- sorts$dat3$trial + 60
simple$dat3$trial <- simple$dat3$trial + 60
for(i in 1:3){
sorts[[i]] <- data.frame(ID = sorts[[i]]$ID, session = i, sorts[[i]][, -1])
simple[[i]] <- data.frame(ID = simple[[i]]$ID, session = i, simple[[i]][, -1])
}
sorts <- data.frame(do.call(rbind, sorts))
simple <- data.frame(do.call(rbind, simple))
for(i in c('ID', 'session', 'condition')){
sorts[[i]] <- factor(sorts[[i]])
simple[[i]] <- factor(simple[[i]])
}
rownames(sorts) <- 1:nrow(sorts)
rownames(simple) <- 1:nrow(simple)
write.csv(sorts, 'fullData.csv', row.names = FALSE)
write.csv(simple, 'simpleData.csv', row.names = FALSE)
nchar('---------------------------')
nchar('---------------------------')
nchar('')
nchar('DATA PREPARATION')
nchar('analyses')
